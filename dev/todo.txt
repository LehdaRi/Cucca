! : priority
~ : low priority
-> : will result to
Priority descends downwards in the file

TODO:

!Multiple component visitor visiting a node containing less component types than specified in visitor

Graphics stuff
	Mesh
	Material
		Texture
	Curves, animations
	AdvancedCamera

Implement a layer of abstraction between the engine and extrenal libraries (no direct dependency from, say, resource files)
	think how to use init info structs properly to achieve this
	
Special file for typedefs (ResourceId)?
	make proper implementation for ResourceId (bool overloading for validity check)?
	typedefs for std::array in VertexData and Mesh classes (Cucca::Vector3f for example)

Rethink role of the Device
Rethink role of the TaskQueue (can be generalized? TBB replacement?)

Add comments and documentation

Renaming of CoreExtensions?
	CoreInterface perhaps?

Check thread safety
	Resources
	ResourcePointers / (ResourceManager)
	nodes/components/visitors?

ResourceManager:
	! thread safety
		handling data structures when destructing(res. infos espec.[shared pointer])
	~ make smarter destructor (multithreaded, skip destruction of destructed resources[add removeDestructedResources member function perhaps?])
	~ fix double copying when passing arguments to Resource::init (forward/move diipadaapa)
	make buffer for unreferenced resources and implement lazy uninitialization

Find more ways to break the resource system
	multiple resource managers
		-> Task / ThreadPool flagging system will cause havoc (removal of all Tasks originated from any manager)
			possible fixes?
				store a void pointer to creator object to Task (kinda hack?)

Proper exceptions and exception handling

Rethink unit test system

Device:
	Implement chrono timer so that fps won't drop when there is too much graphics tasks in the queue